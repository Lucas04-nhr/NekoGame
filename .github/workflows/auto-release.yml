name: Auto Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*" # 当推送以 'v' 开头的标签时触发

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.tag_version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录

      - name: Extract tag version
        id: tag_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Read release notes
        id: release_notes
        run: |
          if [ -f "release-notes.md" ]; then
            echo "RELEASE_NOTES_EXIST=true" >> $GITHUB_OUTPUT
            # 将多行内容转换为环境变量
            {
              echo "RELEASE_BODY<<EOF"
              cat release-notes.md
              echo "EOF"
            } >> $GITHUB_OUTPUT
          else
            echo "RELEASE_NOTES_EXIST=false" >> $GITHUB_OUTPUT
            echo "RELEASE_BODY=Release ${{ steps.tag_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.VERSION }}
          release_name: Release ${{ steps.tag_version.outputs.VERSION }}
          body: ${{ steps.release_notes.outputs.RELEASE_BODY }}
          draft: false
          prerelease: ${{ contains(steps.tag_version.outputs.VERSION, 'beta') || contains(steps.tag_version.outputs.VERSION, 'alpha') || contains(steps.tag_version.outputs.VERSION, 'rc') }}

      - name: Notify release created
        run: |
          echo "✅ Successfully created release ${{ steps.tag_version.outputs.VERSION }}"
          echo "📝 Release notes sourced from release-notes.md"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag_version.outputs.VERSION }}"

  build-and-upload:
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            build_command: build:win
            artifact_pattern: "dist/*.exe"
          - os: macos-latest
            build_command: build:mac
            artifact_pattern: "dist/*.{dmg,blockmap}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          node-version: "23"

      - name: Install dependencies
        run: npm install

      - name: Run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run ${{ matrix.build_command }}

      - name: Find artifacts
        id: find_artifacts
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            exe_file=$(find dist -name "*.exe" -type f | head -1)
            if [ -n "$exe_file" ]; then
              echo "EXE_FILE=$exe_file" >> $GITHUB_OUTPUT
              echo "EXE_NAME=$(basename "$exe_file")" >> $GITHUB_OUTPUT
            fi
            if [ -n "$blockmap_file" ]; then
              echo "BLOCKMAP_FILE=$blockmap_file" >> $GITHUB_OUTPUT
              echo "BLOCKMAP_NAME=$(basename "$blockmap_file")" >> $GITHUB_OUTPUT
            fi
          else
            dmg_file=$(find dist -name "*.dmg" -type f | head -1)
            blockmap_file=$(find dist -name "*.blockmap" -type f | head -1)
            if [ -n "$dmg_file" ]; then
              echo "DMG_FILE=$dmg_file" >> $GITHUB_OUTPUT
              echo "DMG_NAME=$(basename "$dmg_file")" >> $GITHUB_OUTPUT
            fi
            if [ -n "$blockmap_file" ]; then
              echo "BLOCKMAP_FILE=$blockmap_file" >> $GITHUB_OUTPUT
              echo "BLOCKMAP_NAME=$(basename "$blockmap_file")" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload Windows executable
        if: matrix.os == 'windows-latest' && steps.find_artifacts.outputs.EXE_FILE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifacts.outputs.EXE_FILE }}
          asset_name: ${{ steps.find_artifacts.outputs.EXE_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload macOS DMG
        if: matrix.os == 'macos-latest' && steps.find_artifacts.outputs.DMG_FILE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifacts.outputs.DMG_FILE }}
          asset_name: ${{ steps.find_artifacts.outputs.DMG_NAME }}
          asset_content_type: application/octet-stream

      - name: Upload macOS blockmap
        if: matrix.os == 'macos-latest' && steps.find_artifacts.outputs.BLOCKMAP_FILE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find_artifacts.outputs.BLOCKMAP_FILE }}
          asset_name: ${{ steps.find_artifacts.outputs.BLOCKMAP_NAME }}
          asset_content_type: application/octet-stream

      - name: Notify build completion
        run: |
          echo "✅ Successfully built and uploaded artifacts for ${{ matrix.os }}"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"

  notify-completion:
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify success
        if: needs.build-and-upload.result == 'success'
        run: |
          echo "🎉 Release ${{ needs.create-release.outputs.version }} completed successfully!"
          echo "✅ All build artifacts have been uploaded"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.version }}"

      - name: Notify failure
        if: needs.build-and-upload.result == 'failure'
        run: |
          echo "❌ Failed to complete release ${{ needs.create-release.outputs.version }}"
          echo "Please check the workflow logs for details"
